#' @return
#' @export
#'
#' @examples
historical_extremes <- function(df = "", sampling_station = "",
grouping = "", by_month = T){
if(by_month == T){
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit, month) %>%
summarize("Min" = min(result, na.rm = TRUE), "Max" = max(result, na.rm = TRUE))
} else {
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit) %>%
summarize("Min" = min(result, na.rm = TRUE), "Max" = max(result, na.rm = TRUE))
}
}
#'
#' @param df
#' @param sampling_station
#' @param grouping
#' @param by_month
#'
#' @return
#' @export
#'
#' @examples
historical_basics <- function(df = "", sampling_station = "", grouping = "", by_month = T){
if(by_month == T){
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit, month) %>%
summarize(N = n(), Mean = mean(result, na.rm = T),
SD = sd(result, na.rm = T), CV = (SD/N)*100)
} else{
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit) %>%
summarize(N = n(), Mean = mean(result, na.rm = T),
SD = sd(result, na.rm = T), CV = (SD/N)*100)
}
}
#' @param df
#' @param percentiles
#' @param sampling_station
#' @param grouping
#' @param by_month
#'
#' @return
#' @export
#'
#' @examples
historical_percentiles <- function(df = "", percentiles = c(0.1, .25, .50, .75, .9),
sampling_station = "", grouping = "",
by_month = T){
p_names <- map_chr(percentiles, ~paste0(.x*100, "%"))
p_funs <- map(percentiles, ~ partial(quantile, probs = .x, na.rm = TRUE)) %>%
set_names(nm = p_names)
if(by_month == T){
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit, month) %>%
summarize_at(vars(result), funs(!!!p_funs))
} else {
df %>%
filter(parm_tag == grouping & station == sampling_station) %>%
group_by(station, parameter, unit) %>%
summarize_at(vars(result), funs(!!!p_funs))
}
}
month_values <- summarize_monthly(labdat = df) %>%
filter(month == month_select, year == year_select)
hist_ext <- historical_extremes(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist_per <- historical_percentiles(df = df, grouping = grouping,
sampling_station = sampling_station,
percentiles = percentiles, by_month = by_month)
hist_bas <- historical_basics(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist.values <- left_join(hist_bas, hist_ext) %>%
left_join(hist_per)
hist.values$month <- factor(hist.values$month, ordered = T, levels = month.abb)
hist.values <- hist.values[hist.values$month == month_select,]
table.values <- left_join(month_values, hist.values)
table.values <- as.data.frame(table.values)
table.values
caption.text = paste(sampling_station, grouping, "characterics for",
month_select, year_select, "with collated", month_select,
"historical data from", min(df$year), "-", max(df$year), ".")
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", rep("center",ncol(table.values) - 5)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
table.values <- left_join(hist_bas, hist_ext) %>% left_join(hist_per)
table.values
caption.text = paste("Overall historical summary (", min(df$year), "-", max(df$year),
") for", sampling_station, grouping, "water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", rep("centre",ncol(table.values)-2)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
?prettyNum
#' @param grouping
#' @param sampling_station
#' @param percentiles
#' @param by_month
#' @param month_select
#'
#' @return
#' @export
#'
#' @examples
group_table_historical <- function(df = "", year_select = "", grouping = "",
sampling_station = "", percentiles = "",
by_month = T, month_select = NULL){
if(is.null(month_select)){
month_select = month(Sys.Date(), label = T, abbr = T)}
df <- df %>%
filter(parm_tag == grouping & station == sampling_station)
month_values <- summarize_monthly(labdat = df) %>%
filter(month == month_select, year == year_select)
hist_ext <- historical_extremes(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist_per <- historical_percentiles(df = df, grouping = grouping,
sampling_station = sampling_station,
percentiles = percentiles, by_month = by_month)
hist_bas <- historical_basics(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
if(by_month == T) {
hist.values <- left_join(hist_bas, hist_ext) %>%
left_join(hist_per)
hist.values$month <- factor(hist.values$month, ordered = T, levels = month.abb)
hist.values <- hist.values[hist.values$month == month_select,]
table.values <- left_join(month_values, hist.values)
table.values <- as.data.frame(table.values)
caption.text = paste(sampling_station, grouping, "characterics for",
month_select, year_select, "with collated", month_select,
"historical data from", min(df$year), "-", max(df$year), ".")
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", rep("center",ncol(table.values) - 5)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
} else {
table.values <- left_join(hist_bas, hist_ext) %>% left_join(hist_per)
caption.text = paste("Overall historical summary (", min(df$year), "-", max(df$year),
") for", sampling_station, grouping, "water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", rep("centre",ncol(table.values)-2)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
}
}
group_table_historical(df = labdat, year_select = current_year,
grouping = "operations", sampling_station = "Raw",
percentiles = c(0.1, 0.25, 0.5, 0.75, 0.9), by_month = T)
group_table_historical(df = labdat, year_select = current_year,
grouping = "operations", sampling_station = "Raw",
percentiles = c(0.1, 0.25, 0.5, 0.75, 0.9), by_month = F)
table.values
is.na(table.values)
table.values[is.na(table.values)] <- "--"
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
table.values
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", rep("center",ncol(table.values) - 5)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
table.values <- left_join(month_values, hist.values)
table.values <- as.data.frame(table.values)
table.values
table.values[,c(`Montly Mean`:ncol(table.values))] <- signif(table.values[,c(`Montly Mean`:ncol(table.values))])
table.values[,c(`Monthly Mean`:ncol(table.values))] <- signif(table.values[,c(`Monthly Mean`:ncol(table.values))])
table.values[,c(7:ncol(table.values))] <- signif(table.values[,c(7:ncol(table.values))])
table.values
table.values[,c(7:ncol(table.values))] <- prettyNum(table.values[,c(7:ncol(table.values))],
small.interval = 2)
table.values[,c(7:ncol(table.values))] <- signif(table.values[,c(7:ncol(table.values))], digits = 2)
table.values[,c(7:ncol(table.values))]
table.values <- as.data.frame(table.values)
table.values[,c(7:ncol(table.values))] <- signif(table.values[,c(7:ncol(table.values))], digits = 3)
table.values
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste(sampling_station, grouping, "characterics for",
month_select, year_select, "with collated", month_select,
"historical data from", min(df$year), "-", max(df$year), ".")
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", rep("center",ncol(table.values) - 5)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", "center", rep("right", ncol(table.values) - 6)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
by_month = F
hist_ext <- historical_extremes(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist_per <- historical_percentiles(df = df, grouping = grouping,
sampling_station = sampling_station,
percentiles = percentiles, by_month = by_month)
hist_bas <- historical_basics(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
table.values <- left_join(hist_bas, hist_ext) %>% left_join(hist_per)
table.values
table.values[,c(5:ncol(table.values))] <- signif(table.values[,c(5:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste("Overall historical summary (", min(df$year), "-", max(df$year),
") for", sampling_station, grouping, "water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("left",ncol(table.values) - 1)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("left",ncol(table.values) - 2)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("left",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("right",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
caption.text = paste0("Overall historical summary (", min(df$year), "-", max(df$year),
") for ", sampling_station, grouping, " water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("right",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
caption.text = paste0("Overall historical summary (", min(df$year), "-", max(df$year),
") for ", sampling_station, " ", grouping, " water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("right",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
#' @param grouping
#' @param sampling_station
#' @param percentiles
#' @param by_month
#' @param month_select
#'
#' @return
#' @export
#'
#' @examples
group_table_historical <- function(df = "", year_select = "", grouping = "",
sampling_station = "", percentiles = "",
by_month = T, month_select = NULL){
if(is.null(month_select)){
month_select = month(Sys.Date(), label = T, abbr = T)}
df <- df %>%
filter(parm_tag == grouping & station == sampling_station)
month_values <- summarize_monthly(labdat = df) %>%
filter(month == month_select, year == year_select)
hist_ext <- historical_extremes(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist_per <- historical_percentiles(df = df, grouping = grouping,
sampling_station = sampling_station,
percentiles = percentiles, by_month = by_month)
hist_bas <- historical_basics(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
if(by_month == T) {
hist.values <- left_join(hist_bas, hist_ext) %>%
left_join(hist_per)
hist.values$month <- factor(hist.values$month, ordered = T, levels = month.abb)
hist.values <- hist.values[hist.values$month == month_select,]
table.values <- left_join(month_values, hist.values)
table.values <- as.data.frame(table.values)
table.values[,c(7:ncol(table.values))] <- signif(table.values[,c(7:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste(sampling_station, grouping, "characterics for",
month_select, year_select, "with collated", month_select,
"historical data from", min(df$year), "-", max(df$year), ".")
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", "center", rep("right", ncol(table.values) - 6)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
} else {
table.values <- left_join(hist_bas, hist_ext) %>% left_join(hist_per)
table.values[,c(5:ncol(table.values))] <- signif(table.values[,c(5:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste0("Overall historical summary (", min(df$year), "-", max(df$year),
") for ", sampling_station, " ", grouping, " water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("right",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9, digits = 2)
}
}
group_table_historical(df = labdat, year_select = current_year,
grouping = "operations", sampling_station = "Raw",
percentiles = c(0.1, 0.25, 0.5, 0.75, 0.9), by_month = T)
group_table_historical(df = labdat, year_select = current_year,
grouping = "operations", sampling_station = "Raw",
percentiles = c(0.1, 0.25, 0.5, 0.75, 0.9), by_month = F)
#' @param grouping
#' @param sampling_station
#' @param percentiles
#' @param by_month
#' @param month_select
#'
#' @return
#' @export
#'
#' @examples
group_table_historical <- function(df = "", year_select = "", grouping = "",
sampling_station = "", percentiles = "",
by_month = T, month_select = NULL){
if(is.null(month_select)){
month_select = month(Sys.Date(), label = T, abbr = T)}
df <- df %>%
filter(parm_tag == grouping & station == sampling_station)
month_values <- summarize_monthly(labdat = df) %>%
filter(month == month_select, year == year_select)
hist_ext <- historical_extremes(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
hist_per <- historical_percentiles(df = df, grouping = grouping,
sampling_station = sampling_station,
percentiles = percentiles, by_month = by_month)
hist_bas <- historical_basics(df = df, grouping = grouping,
sampling_station = sampling_station, by_month = by_month)
if(by_month == T) {
hist.values <- left_join(hist_bas, hist_ext) %>%
left_join(hist_per)
hist.values$month <- factor(hist.values$month, ordered = T, levels = month.abb)
hist.values <- hist.values[hist.values$month == month_select,]
table.values <- left_join(month_values, hist.values)
table.values <- as.data.frame(table.values)
table.values[,c(7:ncol(table.values))] <- signif(table.values[,c(7:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste(sampling_station, grouping, "characterics for",
month_select, year_select, "with collated", month_select,
"historical data from", min(df$year), "-", max(df$year), ".")
pander(table.values[, c(6, 2, 7:ncol(table.values))],
justify = c("left", "center", rep("right", ncol(table.values) - 6)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9)
} else {
table.values <- left_join(hist_bas, hist_ext) %>% left_join(hist_per)
table.values[,c(5:ncol(table.values))] <- signif(table.values[,c(5:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste0("Overall historical summary (", min(df$year), "-", max(df$year),
") for ", sampling_station, " ", grouping, " water quality characteristics.")
pander(table.values[,2:ncol(table.values)],
justify = c("left", "center", rep("right",ncol(table.values) - 3)),
style = "rmarkdown", split.table = Inf,
caption = caption.text, graph.fontsize = 9)
}
}
group_table_historical(df = labdat, year_select = current_year,
grouping = "operations", sampling_station = "Raw",
percentiles = c(0.1, 0.25, 0.5, 0.75, 0.9), by_month = T)
devtools::install("../bpwtpR")
df <- df %>%
filter(parm_tag == grouping & station == sampling_station,
year(datetime_ymd.hms) == year_select)
table.values <- summarize_monthly(labdat = df)
table.values <- table.values %>%
select(month, parameter, unit, `Monthly Mean`) %>%
spread(month, `Monthly Mean`)
table.values
table.values[,c(3:ncol(table.values))] <- signif(table.values[,c(3:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
table.values
devtools::install("../bpwtpR")
devtools::install("../bpwtpR")
devtools::install()
install.packages("DescTools")
devtools::install()
installed.packages("janitor")
install.packages("janitor")
devtools::install()
library(tidyverse)
removal <- function(first, last) {
value <- (first - last)/first
return(value)
}
scrape_docprofiles <- function(labdat_filename){
labdat <- read_excel(labdat_filename,
sheet = "WTP DOC Profile", range = cell_limits(ul = c(3, 2)),
col_names = TRUE)
labdat <- labdat %>%
select(c(`Sample Date`:CW...9)) %>%
filter(grepl(c("^1|^2"), `Sample Date`)) %>%
rename(datetime_ymd.hms = `Sample Date`,
`Alum Dose` = `Alum Dose (mg/L)`,
`CPAC Dose` = `CPAC Dose (mg/L)`,
`Raw` = `Raw`,
`PreFM` = PreFM...5,
`FM` = FM...6,
`Channel` = Channel...7,
`PreGAC` = `PreGAC/CW...8`,
`Clearwell` = CW...9)
labdat_doc <- select(labdat, c(datetime_ymd.hms, Raw:Clearwell)) %>%
pivot_longer(cols = Raw:Clearwell, names_to = "station", values_to = "result") %>%
mutate(datasheet = "doc_profile",
sheet_year = "",
parameter = "DOC",
unit = "mg/L",
parm_unit = "DOC_mg.L", result = as.character(result))
labdat_dose <- select(labdat, datetime_ymd.hms: `CPAC Dose`) %>%
pivot_longer(cols = `Alum Dose`:`CPAC Dose`, names_to = "parameter", values_to = "result") %>%
mutate(datasheet = "doc_profile",
sheet_year = "",
station = "Raw",
unit = "mg/L",
parm_unit = ifelse(parameter == "Alum Dose", "alumdose_mg.L", "cpacdose_mg.L"))
labdat_merge <- bind_rows(labdat_doc, labdat_dose) %>%
mutate(parm_eval = "measured",
parm_tag = "",
datetime_ymd.hms = as.Date(datetime_ymd.hms),
year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms),
result_org = result,
result = as.numeric(result))
}
current_dates <- bind_rows(unique(tmp$datetime_ymd.hms), unique(tmp_doc$datetime_ymd.hms))
tmp_doc <- scrape_docprofiles(labdat_newfilename) %>%
select(datasheet, station, parameter, unit, datetime_ymd.hms, result, sheet_year) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
result = as.character(result), sheet_year = as.numeric())
tmp_doc <- scrape_docprofiles(labdat_newfilename) %>%
select(datasheet, station, parameter, unit, datetime_ymd.hms, result, sheet_year) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
result = as.character(result), sheet_year = as.factor())
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
getwd()
devtools::install()
devtools::document()
devtools::build()
#' Scrape DOC profiles
#'
#' @param labdat_filename provided file name for the active data file
#'
#' @return
#' @export
#'
#' @examples #scrape_docprofiles(labdat_filename)
scrape_docprofiles <- function(labdat_filename){
labdat <- read_excel(labdat_filename,
sheet = "WTP DOC Profile", range = cell_limits(ul = c(3, 2)),
col_names = TRUE)
labdat <- labdat %>%
select(c(`Sample Date`:CW...9)) %>%
filter(grepl(c("^1|^2"), `Sample Date`)) %>%
rename(datetime_ymd.hms = `Sample Date`,
`Alum Dose` = `Alum Dose (mg/L)`,
`CPAC Dose` = `CPAC Dose (mg/L)`,
`Raw` = `Raw`,
`PreFM` = PreFM...5,
`FM` = FM...6,
`Channel` = Channel...7,
`PreGAC` = `PreGAC/CW...8`,
`Clearwell` = CW...9)
labdat_doc <- select(labdat, c(datetime_ymd.hms, Raw:Clearwell)) %>%
pivot_longer(cols = Raw:Clearwell, names_to = "station", values_to = "result") %>%
mutate(datasheet = "doc_profile",
sheet_year = "",
parameter = "DOC",
unit = "mg/L",
parm_unit = "DOC_mg.L", result = as.character(result))
labdat_dose <- select(labdat, datetime_ymd.hms: `CPAC Dose`) %>%
pivot_longer(cols = `Alum Dose`:`CPAC Dose`, names_to = "parameter", values_to = "result") %>%
mutate(datasheet = "doc_profile",
sheet_year = "",
station = "Raw",
unit = "mg/L",
parm_unit = ifelse(parameter == "Alum Dose", "alumdose_mg.L", "cpacdose_mg.L"))
labdat_merge <- bind_rows(labdat_doc, labdat_dose) %>%
mutate(parm_eval = "measured",
parm_tag = "",
datetime_ymd.hms = as.Date(datetime_ymd.hms),
year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms),
result_org = result,
result = as.numeric(result))
}
devtools::install("bpwtpR")
setwd("C:/Users/Megan/github/bpwtpR")
devtools::install("bpwtpR")
devtools::document("bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::install("../bpwtpR")
library(bpwtpR)
usethis::use_package("Desctools")
library(DescTools)
usethis::use_package("Desctools")
devtools::check("bptwp")
devtools::check("../bptwp")
devtools::check("../bptwpR")
devtools::check("bptwpR")
install.packages(c("backports", "dplyr", "fs", "haven", "jsonlite", "lubridate", "mnormt", "openssl", "pkgload", "roxygen2", "tidyr", "vctrs"))
