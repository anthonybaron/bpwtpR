df <- labdat %>%
filter(parameter %in% parms) %>%
select(-c(parm_unit, unit, parm_tag, result_org, result_flag)) %>%
spread(parameter, result) %>%
mutate(anion_sum = (Sulphate * 0.0208) + (Chloride * 0.0282) +
(Bicarbonate * 0.0164) + (Carbonate * 0.0333),
cation_sum = (Calcium * 0.0499) + (Magnesium * 0.0822) +
(Sodium * 0.0435) + (Potassium * 0.0256) +
(`Silica (SiO3)` * 0.02629),
ion_percdiff = ((cation_sum - anion_sum)/
(cation_sum + anion_sum)) * 100) %>%
select(datasheet:datetime_ymd.hms, anion_sum, cation_sum, ion_percdiff) %>%
gather(parm_unit, result, anion_sum:ion_percdiff) %>%
mutate(datasheet = "NA",
unit = ifelse(parm_unit == "anion_sum" |
parm_unit == "cation_sum", "meq/L", "%"),
parameter = ifelse(parm_unit == "anion_sum", "Anion Sum",
ifelse(parm_unit == "cation_sum", "Cation Sum",
ifelse(parm_unit == "ion_percdiff",
"Ion % Difference", NA))),
parm_eval = "calculated", parm_tag = "operations") %>%
select(datasheet, station, datetime_ymd.hms, parameter, unit:parm_tag, result)
return(as.data.frame(df))
}
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
setwd("C:/Users/Megan/github/bpwtpR")
library(devtools)
devtools::document()
devtools::install()
devtools::install()
devtools::install()
labdat_file =
"BPWTP_routinelabdata_historicalbase_clean.csv"
setwd("../BPWTP_labdat/")
datadir = "data"
xlsdir = "labdat_datafiles"
labdatfile_fpath <- file.path(datadir, xlsdir)
files <- list.files(path = labdatfile_fpath, pattern = ".xlsx",
ignore.case = TRUE, full.names = TRUE)
labdat_newfilename <- files[grepl("active", files)]
labdat_newfilename
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
devtools::document("../bpwtpR")
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
devtools::document("../bpwtpR")
devtools::load_all("../bpwtpR")
labdat_file =
"BPWTP_routinelabdata_historicalbase_clean.csv"
setwd("../BPWTP_labdat/")
datadir = "./data"
xlsdir = "labdat_datafiles"
labdatfile_fpath <- file.path(datadir, xlsdir)
files <- list.files(path = labdatfile_fpath, pattern = ".xlsx",
ignore.case = TRUE, full.names = TRUE)
labdat_newfilename <- files[grepl("active", files)]
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
tmp_doc <- scrape_docprofiles(labdat_newfilename) %>%
select(datasheet, station, parameter, unit,
datetime_ymd.hms, result, sheet_year) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
result = as.character(result), sheet_year = as.factor(sheet_year))
devtools::document("../bpwtpR")
devtools::load_all("../bpwtpR")
tmp_doc <- scrape_docprofiles(labdat_newfilename) %>%
select(datasheet, station, parameter, unit,
datetime_ymd.hms, result, sheet_year) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
result = as.character(result), sheet_year = as.factor(sheet_year))
## select new data
database_dates <- unique(old_data$datetime_ymd.hms)
current_dates <- c(unique(tmp$datetime_ymd.hms), unique(tmp_doc$datetime_ymd.hms))
current_dates <- current_dates[which(current_dates <= as.POSIXct(Sys.Date()))]
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
message(paste("New dates to be added to database", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
devtools::document("../bpwtpR")
devtools::document("../bpwtpR")
devtools::load_all("../bpwtpR")
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
message(paste("New dates to be added to database:", new_dates))
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
message(paste("New dates to be added to database:", new_dates))
print(paste("New dates to be added to database:", new_dates))
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
## update parameter names
new_data <- update_parameters(new_data)
devtools::document("../bpwtpR")
devtools::load_all("../bpwtpR")
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
new_data <- new_data %>%
mutate(year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms)) %>%
select(datasheet:datetime_ymd.hms, year:week, parameter:result) %>%
mutate_if(is.character, as.factor)
labdat_updated <- append_newdata(old_data, new_data)
print(c(dim(old_data), dim(new_data), dim(labdat_updated)))
colnames(old_data)
colnames(new_data)
head(new_data)
head(new_data_calcs)
head(new_data_calcs)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
head(new_data)
head(new_data_calcs)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "", year = year(datetime_ymd.hms)) %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
new_data <- new_data %>%
mutate(year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms)) %>%
select(datasheet:datetime_ymd.hms, year:week, parameter:result) %>%
mutate_if(is.character, as.factor)
head(new_data)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
new_data <- new_data %>%
mutate(year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms)) %>%
select(datasheet:datetime_ymd.hms, year:week, parameter:result_flag) %>%
mutate_if(is.character, as.factor)
labdat_updated <- append_newdata(old_data, new_data)
print(c(dim(old_data), dim(new_data), dim(labdat_updated)))
unique(labdat_updated$parameter)
unique(old_data$parameter)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
head(new_data)
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
## remove operational parameters
operation_dates = c("GACs ON", "GACs OFF", "Ice OFF", "Ice ON", "PAC OFF", "PAC ON")
new_data <- new_data %>%
filter(!parameter %in% operation_dates,
parameter != "Intake")
## Correct detection limit and remove values calculated in-sheet
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
new_data <- new_data %>%
mutate(year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms)) %>%
select(datasheet:datetime_ymd.hms, year:week, parameter:result_flag) %>%
mutate_if(is.character, as.factor)
labdat_updated <- append_newdata(old_data, new_data)
print(c(dim(old_data), dim(new_data), dim(labdat_updated)))
unique(old_data$parameter)
unique(new_data$parameter)
length(unique(new_data$parameter))
devtools::document("../bpwtpR")
devtools::install("../bpwtpR")
?cell_limits
install.packages(c("backports", "broom", "DescTools", "dplyr", "fs", "haven", "jsonlite", "lubridate", "pillar", "pkgbuild", "pkgload", "processx", "Rcpp", "rlang", "tibble", "tidyr", "vctrs"))
devtools::document()
devtools::install()
?map_char
?map_chr
?set_names
?partial
devtools::document()
devtools::install()
devtools::document()
devtools::install()
?signif
devtools::document()
devtools::install()
?spread
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
#' @importFrom lubridate year
#' @importFrom dplyr filter select
#' @importFrom tidyr spread
#' @importFrom magrittr %>%
#'
#' @return
#' @export
#'
#' @examples
#' #
summarize_monthly_table <- function(df = "", grouping = "",
sampling_station = "", year_select = NULL){
if(is.null(year_select)){
year_select = year(Sys.Date())
}
df <- df %>%
filter(parm_tag == grouping & station == sampling_station,
year(datetime_ymd.hms) == year_select)
table.values <- summarize_monthly(labdat = df)
table.values <- table.values %>%
select(month, parameter, unit, `Monthly Mean`) %>%
spread(month, `Monthly Mean`)
table.values[,c(3:ncol(table.values))] <-
signif(table.values[ , c(3:ncol(table.values))], digits = 3)
table.values <- as.matrix(table.values)
table.values[is.na(table.values)] <- "--"
caption.text = paste(year_select, "monthly summary table at the ",
sampling_station, "location.")
pander(round(table.values, digits = 2), justify = c("left", rep("center",
ncol(table.values)-1)),
style = "rmarkdown",
split.table = Inf, use.hyphenation = T,
caption = caption.text, graph.fontsize = 9)
}
?prettyNum
devtools::document()
library(bpwtpR)
detach("package:bpwtpR", unload = TRUE)
rm(list = c("summarize_monthly_table"))
devtools::document()
devtools::install()
devtools::install()
labdat_file =
"BPWTP_routinelabdata_historicalbase_clean.csv"
datadir = "./data"
setwd("../BPWTP_labdat/")
xlsdir = "labdat_datafiles"
labdatfile_fpath <- file.path(datadir, xlsdir)
files <- list.files(path = labdatfile_fpath, pattern = ".xlsx",
ignore.case = TRUE, full.names = TRUE)
labdat_newfilename <- files[grepl("active", files)]
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
library(tidyverse)
## load data
old_data <- read_labdat(datadir = datadir, labdat_file = labdat_file) %>%
mutate(sheet_year = as.factor(sheet_year))
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
library(lubridate)
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
View(tmp)
tmp <- scrape_labdatxls(labdat_newfilename) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
sheet_year = as.factor(year(datetime_ymd.hms)))
tmp_doc <- scrape_docprofiles(labdat_newfilename) %>%
select(datasheet, station, parameter, unit,
datetime_ymd.hms, result, sheet_year) %>%
mutate(datetime_ymd.hms = as.POSIXct(datetime_ymd.hms),
result = as.character(result), sheet_year = as.factor(sheet_year))
## select new data
database_dates <- unique(old_data$datetime_ymd.hms)
current_dates <- c(unique(tmp$datetime_ymd.hms), unique(tmp_doc$datetime_ymd.hms))
current_dates <- current_dates[which(current_dates <= as.POSIXct(Sys.Date()))]
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
## remove operational parameters
operation_dates = c("GACs ON", "GACs OFF", "Ice OFF", "Ice ON", "PAC OFF", "PAC ON")
new_data <- new_data %>%
filter(!parameter %in% operation_dates,
parameter != "Intake")
## Correct detection limit and remove values calculated in-sheet
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
new_data <- append_calc_values(new_data, new_data_calcs)
new_data <- new_data %>%
mutate(year = year(datetime_ymd.hms),
month = month(datetime_ymd.hms, label = T, abbr = T),
week = week(datetime_ymd.hms)) %>%
select(datasheet:datetime_ymd.hms, year:week, parameter:result_flag) %>%
mutate_if(is.character, as.factor)
View(new_data)
View(new_data_calcs)
devtools::document()
devtools::load_all("../bpwtpR")
if(!all(database_dates %in% current_dates)){ # are all values false? TRUE = Yes
# select the dates that are not in the database
new_dates <- current_dates[which(!(current_dates %in% database_dates))]
new_data <- tmp %>%
bind_rows(tmp_doc) %>%
filter(datetime_ymd.hms %in% new_dates)
} else {
stop("No data to add", call. = T)
}
#print(paste("New dates to be added to database:", new_dates))
## update parameter names
new_data <- update_parameters(new_data)
## remove operational parameters
operation_dates = c("GACs ON", "GACs OFF", "Ice OFF", "Ice ON", "PAC OFF", "PAC ON")
new_data <- new_data %>%
filter(!parameter %in% operation_dates,
parameter != "Intake")
## Correct detection limit and remove values calculated in-sheet
new_data <- new_data %>%
filter(parm_eval != "calculated_insheet") %>%
mutate(result_org = result, ## create a new column for the orginal result
result_flag = "") %>%
replace_dl()%>%
mutate(result = as.numeric(result))
new_data <- convert_biocounts(new_data)
new_data_calcs <- apply_calculations(new_data %>%
filter(datasheet != "doc_profile"))
?signif
devtools::load_all("../bpwtpR")
devtools::document("../bpwtpR")
devtools::load_all("../bpwtpR")
devtools::install("../bpwtpR")
library(devtools)
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
